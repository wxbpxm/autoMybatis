/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package fuku.automybatis.pageconfig.ui;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import org.mybatis.generator.api.IntrospectedColumn;

import fuku.automybatis.bean.FieldConfig;
import fuku.automybatis.bean.Option;
import fuku.automybatis.freemarkertool.GeneratePageTool;
import fuku.automybatis.ui.SelectTableDialog;

/**
 *
 * @author wangxuebiao
 */
public class GeneratePageConfigJDialog extends javax.swing.JDialog {
	
	private static final long serialVersionUID = 5034991466266937038L;
	
	private GeneratePageTool generatePageTool;
	
	private List<FieldConfig> listConfigs;
	private List<FieldConfig> detailConfigs;
	
	private Map<String, IntrospectedColumn> introspectedColumnMap;
	
    /**
     * Creates new form GeneratePageConfigJDialog
     */
    public GeneratePageConfigJDialog(GeneratePageTool generatePageTool) {
        super();
        this.generatePageTool = generatePageTool;
        initComponents();
        myInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel_top = new javax.swing.JPanel();
        jPanel_top_left = new javax.swing.JPanel();
        jLabel_module_name = new javax.swing.JLabel();
        jTextField_moduleName = new javax.swing.JTextField();
        jbtn_start_gen_page = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTF_table_name = new javax.swing.JTextField();
        jLabel_module_folder = new javax.swing.JLabel();
        jTextField_pagepath = new javax.swing.JTextField();
        jCheckBox_dao = new javax.swing.JCheckBox();
        jCheckBox_search = new javax.swing.JCheckBox();
        jCheckBox_service = new javax.swing.JCheckBox();
        jCheckBox_controller = new javax.swing.JCheckBox();
        jPanel_left = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtableListConfig = new MyConfigTable(new int[]{3},new int[]{4});
        jPanel_right = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtableDetailConfig = new MyConfigTable(new int[]{3}, new int[]{4});

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel_top.setBorder(javax.swing.BorderFactory.createTitledBorder("基本配置"));

        jPanel_top_left.setBackground(new java.awt.Color(255, 204, 51));

        jLabel_module_name.setText("页面名称:");

        jTextField_moduleName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_moduleNameActionPerformed(evt);
            }
        });

        jbtn_start_gen_page.setText("开始生成");
        jbtn_start_gen_page.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_start_gen_pageActionPerformed(evt);
            }
        });

        jLabel1.setText("模块名称:");

        jTF_table_name.setEditable(false);
        jTF_table_name.setFocusable(false);
        jTF_table_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_table_nameActionPerformed(evt);
            }
        });

        jLabel_module_folder.setText("页面路径:");

        jTextField_pagepath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_pagepathActionPerformed(evt);
            }
        });

        jCheckBox_dao.setSelected(true);
        jCheckBox_dao.setText("dao层代码");

        jCheckBox_search.setSelected(true);
        jCheckBox_search.setText("search对象");

        jCheckBox_service.setSelected(true);
        jCheckBox_service.setText("service");

        jCheckBox_controller.setSelected(true);
        jCheckBox_controller.setText("控制器");

        javax.swing.GroupLayout jPanel_top_leftLayout = new javax.swing.GroupLayout(jPanel_top_left);
        jPanel_top_left.setLayout(jPanel_top_leftLayout);
        jPanel_top_leftLayout.setHorizontalGroup(
            jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_top_leftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_top_leftLayout.createSequentialGroup()
                        .addComponent(jLabel_module_name, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_moduleName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox_dao))
                    .addGroup(jPanel_top_leftLayout.createSequentialGroup()
                        .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_module_folder, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_pagepath, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTF_table_name, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtn_start_gen_page)
                            .addComponent(jCheckBox_search))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox_controller)
                    .addComponent(jCheckBox_service))
                .addContainerGap(660, Short.MAX_VALUE))
        );
        jPanel_top_leftLayout.setVerticalGroup(
            jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_top_leftLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_module_name)
                    .addComponent(jTextField_moduleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_dao)
                    .addComponent(jCheckBox_service))
                .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_top_leftLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel_module_folder)
                            .addComponent(jTextField_pagepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5))
                    .addGroup(jPanel_top_leftLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox_search)
                            .addComponent(jCheckBox_controller))))
                .addGroup(jPanel_top_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTF_table_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_start_gen_page)))
        );

        javax.swing.GroupLayout jPanel_topLayout = new javax.swing.GroupLayout(jPanel_top);
        jPanel_top.setLayout(jPanel_topLayout);
        jPanel_topLayout.setHorizontalGroup(
            jPanel_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_top_left, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel_topLayout.setVerticalGroup(
            jPanel_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_topLayout.createSequentialGroup()
                .addComponent(jPanel_top_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 2, Short.MAX_VALUE))
        );

        jPanel_left.setBorder(javax.swing.BorderFactory.createTitledBorder("列表页面配置"));

        jtableListConfig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"11", "12","标题",  "是", "否", "是"}
            },
            new String [] {
                "字段","数据库类型", "字段标签","是否链接", "类型"
            }
        ));
        jtableListConfig.setDragEnabled(true);
        jtableListConfig.setDropMode(javax.swing.DropMode.INSERT);
        jtableListConfig.setFocusCycleRoot(true);
        jtableListConfig.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtableListConfig.setShowGrid(false);
        jtableListConfig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtableListConfigMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtableListConfigMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtableListConfig);

        javax.swing.GroupLayout jPanel_leftLayout = new javax.swing.GroupLayout(jPanel_left);
        jPanel_left.setLayout(jPanel_leftLayout);
        jPanel_leftLayout.setHorizontalGroup(
            jPanel_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_leftLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_leftLayout.setVerticalGroup(
            jPanel_leftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_leftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel_right.setBorder(javax.swing.BorderFactory.createTitledBorder("详情页面配置"));

        jtableDetailConfig.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"11", "12","标题", "是", "否", "文本"}
            },
            new String [] {
                "字段名称", "类型", "字段名称","是否为空","类型"
            }
        ));
        jtableDetailConfig.setDragEnabled(true);
        jtableDetailConfig.setDropMode(javax.swing.DropMode.INSERT);
        jtableDetailConfig.setFocusCycleRoot(true);
        jtableDetailConfig.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtableDetailConfig.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jtableDetailConfigMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jtableDetailConfig);
        jtableDetailConfig.getAccessibleContext().setAccessibleName("");
        jtableDetailConfig.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel_rightLayout = new javax.swing.GroupLayout(jPanel_right);
        jPanel_right.setLayout(jPanel_rightLayout);
        jPanel_rightLayout.setHorizontalGroup(
            jPanel_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_rightLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_rightLayout.setVerticalGroup(
            jPanel_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_rightLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_top, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_right, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel_left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel_left, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel_right, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>  
    
    private void jTF_table_nameActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void jTextField_moduleNameActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void jtableListConfigMouseClicked(java.awt.event.MouseEvent evt) {                                              
          
    }    
    
    private void jTextField_pagepathActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }     
    
    private void jtableListConfigMouseReleased(java.awt.event.MouseEvent evt) {                                               
        if (evt.getClickCount() == 2 && evt.isMetaDown()) {
            // 处理鼠标右键双击
            JTable sourceTable = (JTable)evt.getSource();  
            if(sourceTable.getRowCount() <= 0){  
                return;  
            }  
            int rowIndex = sourceTable.rowAtPoint(evt.getPoint());  
            DefaultTableModel tableModel = (DefaultTableModel)sourceTable.getModel();  
            tableModel.removeRow(rowIndex);  
        }
    }                                              

    private void jtableDetailConfigMouseReleased(java.awt.event.MouseEvent evt) {                                                 
        
    	if (evt.getClickCount() == 2 && evt.isMetaDown()) {
            // 处理鼠标双击
            JTable sourceTable = (JTable)evt.getSource();  
            if(sourceTable.getRowCount() <= 0){
                return;  
            }
            int rowIndex = sourceTable.rowAtPoint(evt.getPoint());  
            DefaultTableModel tableModel = (DefaultTableModel)sourceTable.getModel();  
            tableModel.removeRow(rowIndex);  
        }
    }                                                

    private void jbtn_start_gen_pageActionPerformed(java.awt.event.ActionEvent evt) {                                                    
    	try {
    		String pageName = this.jTextField_moduleName.getText();
    		String pagePath = this.jTextField_pagepath.getText();
    		String moduleName = this.jTF_table_name.getText().toLowerCase();
    		loadConfigData();
    		List<String> options = new ArrayList<String>();
    		if(this.jCheckBox_dao.isSelected()) {
    			options.add(SelectTableDialog.OPT_GENERATE_DAO);
    		}
    		if(this.jCheckBox_search.isSelected()) {
    			options.add(SelectTableDialog.OPT_GENERATE_SEARCH);
    		}
    		if(this.jCheckBox_service.isSelected()) {
    			options.add(SelectTableDialog.OPT_GENERATE_SERVICE);
    		}
    		if(this.jCheckBox_controller.isSelected()) {
    			options.add(SelectTableDialog.OPT_GENERATE_CONTROLLER);
    		}
			generatePageTool.startGenerateCodes(listConfigs, detailConfigs, pageName, moduleName, pagePath, options);
			this.setVisible(false);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
    private void loadConfigData() {
    	listConfigs = new ArrayList<FieldConfig>();
    	detailConfigs = new ArrayList<FieldConfig>();
    	
    	int detailRowCount = this.jtableDetailConfig.getModel().getRowCount();
    	System.out.println("detailRowCount:" + detailRowCount);
    	for(int i=0; i<detailRowCount; i++) {
    		String name = (String)this.jtableDetailConfig.getModel().getValueAt(i, 0);
    		String type = (String)this.jtableDetailConfig.getModel().getValueAt(i, 1);
    		String remark = (String)this.jtableDetailConfig.getModel().getValueAt(i, 2);
    		String canbeNullStr = (String)this.jtableDetailConfig.getModel().getValueAt(i, 3);
    		String htmlType = (String)this.jtableDetailConfig.getModel().getValueAt(i, 4);
    		boolean canBeNull = "1".equals(canbeNullStr)? true : false;
    		FieldConfig fieldConfig = new FieldConfig();
    		fieldConfig.setName(name);
    		fieldConfig.setJdbcType(type);
    		fieldConfig.setLabel(remark);
    		fieldConfig.setCanBeNull(canBeNull);
    		fieldConfig.setHtmlType(htmlType);
    		//如果是status这样的字段，则读取备注，给option塞值
    		if("status".equals(name)) {
    			IntrospectedColumn column = this.introspectedColumnMap.get(name);
    			String tmpRemark = column.getRemarks();
    			if(tmpRemark != null && !tmpRemark.isEmpty()) {
    				//默认认为第一个是字段解释， 第二个开始是值和含义
    				List<Option> options  = this.getStatusOption(name);
    				fieldConfig.setOptions(options);
    			}
    		}
    		
    		detailConfigs.add(fieldConfig);
    	}
    	
    	int listRowCount = this.jtableListConfig.getModel().getRowCount();
    	for(int i=0; i<listRowCount; i++) {
    		String name = (String)this.jtableListConfig.getModel().getValueAt(i, 0);
    		String type = (String)this.jtableListConfig.getModel().getValueAt(i, 1);
    		String remark = (String)this.jtableListConfig.getModel().getValueAt(i, 2);
    		String needLinkStr = (String)this.jtableListConfig.getModel().getValueAt(i, 3);
    		String htmlType = (String)this.jtableListConfig.getModel().getValueAt(i, 4);
    		boolean needLink = "1".equals(needLinkStr)? true : false;
    		FieldConfig fieldConfig = new FieldConfig();
    		fieldConfig.setName(name);
    		fieldConfig.setJdbcType(type);
    		fieldConfig.setLabel(remark);
    		fieldConfig.setNeedLink(needLink);
    		fieldConfig.setHtmlType(htmlType);
    		//如果是status这样的字段，则读取备注，给option塞值
    		if("status".equals(name)) {
				//默认认为第一个是字段解释， 第二个开始是值和含义
				List<Option> options  = this.getStatusOption(name);
				fieldConfig.setOptions(options);
    		}
    		listConfigs.add(fieldConfig);
    	}
    	
    }
    
    private List<Option> getStatusOption(String name) {
    	IntrospectedColumn column = this.introspectedColumnMap.get(name);
		String tmpRemark = column.getRemarks();
		if(tmpRemark != null && !tmpRemark.isEmpty()) {
			String[] remarkAry = tmpRemark.split(" ");
			//默认认为第一个是字段解释， 第二个开始是值和含义
			List<Option> options = new ArrayList<Option>();
			for(int k = 1; k < remarkAry.length; k++) {
				String tmp = remarkAry[k];
				String splitChar = null;
				if(tmp.contains("：")) {
					splitChar = "：";
				} else if(tmp.contains(":")) {
					splitChar = ":";
				}
				if(splitChar == null) {
					continue;
				}
				String tmpValue = tmp.substring(0, tmp.indexOf(splitChar));
    			String tmpName = tmp.substring(tmp.indexOf(splitChar)+1);
    			Option option = new Option();
    			option.setKey(tmpName);
    			option.setValue(tmpValue);
    			options.add(option);
			}
			return options;
		}
		return null;
    }
    

   private void myInit() {
       this.jtableDetailConfig.setUI(new DragDropRowTableUI());  
       this.jtableListConfig.setUI(new DragDropRowTableUI());  
       
       jTF_table_name.setText(this.generatePageTool.getModuleName());
       this.jTextField_pagepath.setText(this.generatePageTool.getModuleName().toLowerCase());
       //这里把数据初始化
       int rows = this.generatePageTool.getIntrospectedColumns().size();
       List<String> fieldNames = new ArrayList<String>();
       for(int i = 0; i<rows ;i++) {
    	   IntrospectedColumn tmpColumn = this.generatePageTool.getIntrospectedColumns().get(i);
			if(tmpColumn.getJavaProperty() != null){
				fieldNames.add(tmpColumn.getJavaProperty());
			}
       }
       //需要排除的字段
       List<String>  detailExcludeFields = new ArrayList<String>();
       detailExcludeFields.add("createDate");
       detailExcludeFields.add("createTime");
       int excludeCount = 0;
       for(String tmp : fieldNames) {
    	   if(detailExcludeFields.contains(tmp)) {
    		   excludeCount++;
    	   }
       }
       
       
       Object [][] detailConfigData = new Object [rows - excludeCount][5];
       Object [][] listConfigData = new Object [rows][5];
       introspectedColumnMap = new HashMap<String, IntrospectedColumn>();
       int k = 0;
       for(int i = 0; i<rows ;i++) {
       	IntrospectedColumn tmpColumn = this.generatePageTool.getIntrospectedColumns().get(i);
			if(tmpColumn.getJavaProperty() != null){
				introspectedColumnMap.put(tmpColumn.getJavaProperty(), tmpColumn);
				
				String remark = tmpColumn.getRemarks();
				if(remark != null) {
					remark = remark.trim();
					if(remark.indexOf(" ") > 0) {
						remark = remark.substring(0, remark.indexOf(" "));
					}
					if(remark.indexOf("(") > 0) {
						remark = remark.substring(0, remark.indexOf("("));
					}
					if(remark.indexOf("（") > 0) {
						remark = remark.substring(0, remark.indexOf("（"));
					}
					if(remark.contains("字段")) {
						remark = remark.replaceAll("字段", "");
					}
					if(remark.contains("id")) {
						remark = remark.replaceAll("id", "");
					}
 				}

				if(!detailExcludeFields.contains(tmpColumn.getJavaProperty())) {
					 detailConfigData[k][0] = tmpColumn.getJavaProperty();
					detailConfigData[k][1] = tmpColumn.getJdbcTypeName();
					detailConfigData[k][2] = remark;
					detailConfigData[k][3] = "0";
					if("logo".equals(tmpColumn.getJavaProperty())) {
						detailConfigData[k][4] = "图片";
					} else if("INTEGER".equals(tmpColumn.getJdbcTypeName()) || "DECIMAL".equals(tmpColumn.getJdbcTypeName())){
						detailConfigData[k][4] = "数值";
					} else if("BIGINT".equals(tmpColumn.getJdbcTypeName()) || "CHAR".equals(tmpColumn.getJdbcTypeName())){
						detailConfigData[k][4] = "下拉框";
					} else if("DATE".equals(tmpColumn.getJdbcTypeName())){
						detailConfigData[k][4] = "日期";
					} else if("DATETIME".equals(tmpColumn.getJdbcTypeName()) || "TIMESTAMP".equals(tmpColumn.getJdbcTypeName())){
						detailConfigData[k][4] = "时间";
					} else {
						detailConfigData[k][4] = "文本";
					}
					k++;
				 }
				
				listConfigData[i][0] = tmpColumn.getJavaProperty();
				listConfigData[i][1] = tmpColumn.getJdbcTypeName();
				
				listConfigData[i][2] = remark;
				if("logo".equals(tmpColumn.getJavaProperty()) || "name".equals(tmpColumn.getJavaProperty())  || "title".equals(tmpColumn.getJavaProperty())) {
					listConfigData[i][3] = "1";
				}  else {
					listConfigData[i][3] = "0";
				}
				
				
				if("logo".equals(tmpColumn.getJavaProperty())) {
					listConfigData[i][4] = "图片";
				} else if("INTEGER".equals(tmpColumn.getJdbcTypeName()) || "DECIMAL".equals(tmpColumn.getJdbcTypeName())){
					listConfigData[i][4] = "数值";
				} else if("BIGINT".equals(tmpColumn.getJdbcTypeName()) || "CHAR".equals(tmpColumn.getJdbcTypeName())){
					listConfigData[i][4] = "下拉框";
				} else if("DATE".equals(tmpColumn.getJdbcTypeName())){
					listConfigData[i][4] = "日期";
				} else if("DATETIME".equals(tmpColumn.getJdbcTypeName()) || "TIMESTAMP".equals(tmpColumn.getJdbcTypeName())){
					listConfigData[i][4] = "时间";
				} else {
					listConfigData[i][4] = "文本";
				}
				
			}
		}
     
       
       jtableDetailConfig.setModel(new javax.swing.table.DefaultTableModel(
       		detailConfigData,
           new String [] {
               "字段名称", "类型", "字段名称", "是否为空","类型"
           }
       ));
       
       jtableListConfig.setModel(new javax.swing.table.DefaultTableModel(
          		listConfigData,
          new String [] {
              "字段名称", "数据库字段类型", "字段名称", "是否链接", "类型"
          }
       ));
   }

// Variables declaration - do not modify                     
   private javax.swing.JCheckBox jCheckBox_controller;
   private javax.swing.JCheckBox jCheckBox_dao;
   private javax.swing.JCheckBox jCheckBox_search;
   private javax.swing.JCheckBox jCheckBox_service;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel_module_folder;
   private javax.swing.JLabel jLabel_module_name;
   private javax.swing.JPanel jPanel_left;
   private javax.swing.JPanel jPanel_right;
   private javax.swing.JPanel jPanel_top;
   private javax.swing.JPanel jPanel_top_left;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JTextField jTF_table_name;
   private javax.swing.JTextField jTextField_moduleName;
   private javax.swing.JTextField jTextField_pagepath;
   private javax.swing.JButton jbtn_start_gen_page;
   private javax.swing.JTable jtableDetailConfig;
   private javax.swing.JTable jtableListConfig;
   // End of variables declaration                                 
}
